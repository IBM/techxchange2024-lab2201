{
    "componentChunkName": "component---src-pages-index-mdx",
    "path": "/",
    "result": {"pageContext":{"frontmatter":{"title":"Lab 2201 - From Zero to Hero MicroProfile application creation using AI","description":"Lab 2201 - From Zero to Hero MicroProfile application creation using AI"},"relativePagePath":"/index.mdx","titleType":"append","MdxNode":{"id":"33793b95-d2bc-5f1e-9dec-f1a68ed2b4fe","children":[],"parent":"f3720d28-c5bb-5105-a794-0317df2e3119","internal":{"content":"---\ntitle: Lab 2201 - From Zero to Hero MicroProfile application creation using AI\ndescription: Lab 2201 - From Zero to Hero MicroProfile application creation using AI\n---\n\n<PageDescription>\n\nYou might have some concerns with Cloud deployments such as serviceability, configuration, development, testing, and more. Luckily, MicroProfile addresses these concerns. MicroProfile defines cloud native API standards for developing portable microservices which function natively in the Cloud. IBM WebSphere Liberty offers a first-class implementation for MicroProfile. MicroProfile application development is even easier with Generative Artificial Intelligence (GenAI). This hands-on session shows how to use GenAI to help with MicroProfile application creation on Liberty. After this session, you should be able to use MicroProfile in your application with great confidence and significantly improved productivity.\n\n</PageDescription>\n\n# Notices and disclaimers\n\n© 2024 International Business Machines Corporation. No part of this document may be reproduced or transmitted in any form without written permission from IBM.\n\nU.S. Government Users Restricted Rights — use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM.\n\nThis document is current as of the initial date of publication and may be changed by IBM at any time. Not all offerings are available in every country in which IBM operates.\n\nInformation in these presentations (including information relating to products that have not yet been announced by IBM) has been reviewed for accuracy as of the date of initial publication and could include unintentional technical or typographical errors. IBM shall have no responsibility to update this information. \n\nThis document is distributed “as is” without any warranty, either express or implied. In no event, shall IBM be liable for any damage arising from the use of this information, including but not limited to, loss of data, business interruption, loss of profit or loss of opportunity. IBM products and services are warranted per the terms and conditions of the agreements under which they are provided. The performance data and client examples cited are presented for illustrative purposes only. Actual performance results may vary depending on specific configurations and operating conditions.\n\nIBM products are manufactured from new parts or new and used parts. In some cases, a product may not be new and may have been previously installed. Regardless, our warranty terms apply.”\n\nAny statements regarding IBM's future direction, intent or product plans are subject to change or withdrawal without notice.\n\nPerformance data contained herein was generally obtained in a controlled, isolated environments. Customer examples are presented as illustrations of how those customers have used IBM products and the results they may have achieved. Actual performance, cost, savings or other results in other operating environments may vary. \n\nReferences in this document to IBM products, programs, or services does not imply that IBM intends to make such products, programs or services available in all countries in which IBM operates or does business. \n\nWorkshops, sessions and associated materials may have been prepared by independent session speakers, and do not necessarily reflect the views of IBM. All materials and discussions are provided for informational purposes only, and are neither intended to, nor shall constitute legal or other guidance or advice to any individual participant or their specific situation.\n\nIt is the customer’s responsibility to ensure its own compliance with legal requirements and to obtain advice of competent legal counsel as to the identification and interpretation of any relevant laws and regulatory requirements that may affect the customer’s business and any actions the customer may need to take to comply with such laws. IBM does not provide legal advice or represent or warrant that its services or products will ensure that the customer follows any law.\n\nQuestions on the capabilities of non-IBM products should be addressed to the suppliers of those products. IBM does not warrant the quality of any third-party products, or the ability of any such third-party products to interoperate with IBM’s products. IBM expressly disclaims all warranties, expressed or implied, including but not limited to, the implied warranties of merchantability and fitness for a purpose.\n\nThe provision of the information contained herein is not intended to, and does not, grant any right or license under any IBM patents, copyrights, trademarks or other intellectual property right.\n\nIBM, the IBM logo, and ibm.com are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the Web at “Copyright and trademark information” at\n<https://www.ibm.com/legal/copyright-trademark>.\n\n# Background\n\n## IBM WebSphere Liberty\n\n[IBM WebSphere Liberty](https://www.ibm.com/websphere/liberty) is a next-generation Java application runtime that accelerates the delivery of cloud-native applications. WebSphere Liberty is largely based on the open-source [Open Liberty](https://github.com/OpenLiberty/open-liberty) project so some links and examples may point to Open Liberty documentation.\n\n## Microservices\n\nOne of the transformative architectures that the cloud has accelerated is a [microservices architecture](https://www.ibm.com/topics/microservices). The idea is that once it's easier to build virtualized and isolated components, this allows breaking up traditional \"monolith\" applications into smaller and more nimble applications that talk to each other for faster development iteration and independent scaling capabilities. New Java application development standards have been developed to support the microservices architectural style and one such open source standard supported by IBM is [MicroProfile](https://microprofile.io/). Liberty is one application server that implements the MicroProfile standard.\n\n## IBM watsonx Code Assistant\n\nIBM watsonx Code Assistant is a Large Language Model (LLM)-based generative AI based on IBM's Granite foundation models. WCA is tuned specifically for Enterprise Java code in addition to other programming languages. WCA is the main tool we will be using in this lab and it has capabilities to [generate code, explain code, generate tests, and more](https://www.ibm.com/blog/announcement/watsonx-code-assistant-java/).\n\n![](../images/media/keycaps.png)\n\n### WCA Preview\n\nAt the time of this writing, a preview version of WCA is available for download for Visual Studio Code and Eclipse using the following link. The VS Code extension is already downloaded and installed in the lab image so this is only for reference if you'd like to explore more or try this out after the lab: <https://early-access.ibm.com/software/support/trial/cst/programwebsite.wss?siteId=2044&tabId=5712&p=&h=null>\n\nThe AI model used is the IBM Granite 20B enterprise Java code instruct model. This model was trained in two phases. In the first phase, the model was trained on 3 to 4 trillion tokens sourced from 116 programming languages, ensuring a comprehensive understanding of programming languages and syntax. In the second phase, the model was additionally trained on 500 billion tokens with a carefully designed mixture of high-quality data from code and natural language domains to improve the model's ability to reason. For more information about the IBM Granite 20B enterprise Java code instruct model, see [Granite Code Models: A Family of Open Foundation Models for Code Intelligence](https://arxiv.org/pdf/2405.04324).\n\nTraining of the IBM Granite 20B enterprise Java code instruct model included datasets for Jakarta EE, MicroProfile, and other enterprise Java repositories such as Open Liberty GitHub repositories.\n\nThe context window for the IBM Granite 20B enterprise Java code instruct model is 8192 tokens.\n\nThe model uses prompts for inference only and does not store any client prompts. None of your data is used to train the model in realtime or stored and used offline.\n\n#### IBM Cloud Transformation Advisor\n\nYou may be familiar with the [IBM Cloud Transformation Advisor](https://www.ibm.com/products/cloud-pak-for-applications/transformation-advisor) tool which helps evaluate the transformation and modernization of code from older versions of Java and traditional programming models such as WebSphere Application Server traditional to platforms such as Liberty.\n\nWCA includes the capabilities of Transformation Advisor and uses automation and generative AI to enact its recommendations.\n\n#### Limitations\n\nAt the time of this writing, WCA has some limitations:\n\n1. Only the Eclipse IDE is available to modernize your applications.\n1. Only single module Maven WAR applications are supported. Although multi-module projects are not supported, you can point to a WAR module in a multi-module project.\n1. Only Maven can be used to build applications.\n1. The following use cases are supported only on macOS and Windows:\n    1. Generating tests for your Java application with the Visual Studio Code extension\n    1. Generating JUnit tests for your Java application with the Eclipse IDE\n    1. Explaining code changes\n    1. Explaining methods\n\nFor the above and other reasons, this lab does not explore all of the features of WCA; however, if you have the opportunity, we recommend that you check out Lab 1596: Hands-on workshop on AI in Java application development. Lab 1596 explores all of the features of WC4EJA.\n\n#### Feedback\n\nYou can provide feedback on your experiences to the lab proctor, including suggestions for when your results don't match your expectations.\n\n# Running the Lab\n\n## Lab\n\nThis lab will go through the process of running IBM watsonx Code Assistant (WCA) with a focus on MicroProfile applications. Additional \"learn more\" boxes may be peppered throughput the lab:\n\n<InlineNotification>\n\nThese \"learn more\" boxes will be peppered throughout the lab steps to explain steps in more detail. We encourage you to read these or at least skim them to get a detailed understanding how everything works.\n\n</InlineNotification>\n\nLet's get started!\n\n### Access the Virtual Machine\n\n1.  The first screen you'll see is the lab page. Click on the `Console` button to access the lab machine:\n    \n    ![](../images/media/accesslab.png)\n\n1.  Click on the `Open in a new window` button to the left of the close button to open a larger screen:\n    \n    ![](../images/media/openinnewwindow.png)\n\n1.  The screen is initially locked. Use your mouse to drag from the bottom to the top:\n    \n    ![](../images/media/unlockscreen.png)\n\n1.  Click on the **admin** user:\n    \n    ![](../images/media/image7.png)\n\n1.  Enter the password **IBMDem0s** (with a **zero** rather than an O) to login:\n    \n    ![](../images/media/image8.png)\n\n### Copy and Pasting\n\nYou may copy and paste from this lab guide into the client virtual machine:\n\n1.  Ensure the target of the paste has focus in the virtual machine (e.g. a terminal window).\n\n2.  Click the Cursor icon at the top of the client virtual machine browser tab:\n    \n    ![](../images/media/image10.png)\n\n3.  Paste something into the textbox and then click `Slow Send Text`. After the text has completed sending, click the close button in the top right of the send text popup.\n    \n    ![](../images/media/copypaste.png)\n\n4.  You can try `Fast Send Text` but be careful to double check if all characters were sent successfully.\n\n### Open Visual Studio Code\n\nWe will use a pre-installed IBM watsonx Code Assistant (WCA) extension in Visual Studio Code which is a common code editor.\n\n1.  Click on Activities in the top left:\n    \n    ![](../images/media/image12.png)\n\n2.  Click on the Visual Studio Code (vscode) icon to launch it:\n    \n    ![](../images/media/image13.png)\n\n### Explain a Java class\n\nFirst, let's get our feet wet by asking WCA to explain a Java class file. The lab image contains an MicroProfile starter project which we will open and explore:\n\n1. Click on the file explorer in the top left of VS Code and then expand the `app-name` project and open `src/main/java/com/demo/rest/RestApplication.java`:\n    \n   ![](../images/media/openrestapp.png)\n\n1. WCA adds Explain, Document, and Unit Test buttons above Java classes and methods:\n    \n   ![](../images/media/vscodeannotations.png)\n\n1. Click the Explain button above the `RestApplication` class. The WCA extension window will open on the left side and send a request to the WCA service to explain the selected code:\n    \n   ![](../images/media/explainrestapp.png)\n\n1. Next, click on the Document button above the `RestApplication` class. The WCA extension window will open on the left side and send a request to the WCA service to generation code documentation for the selected class. If you are happy with the generated documentation code, you would then copy and paste the code into the file editor on the right.\n    \n   ![](../images/media/document.png)\n\n### MicroProfile and GenAI\n\nNow let's get to the heart of the lab and use GenAI to generate MicroProfile code. Let's start with a simple MicroProfile REST endpoint which will generate a weather forecast for a latitude/longitude point. REST is an architectural style for web service calls and it's implemented in MicroProfile using [Jakarta Enterprise Edition RESTful Web Service](https://en.wikipedia.org/wiki/Jakarta_RESTful_Web_Services).\n\nFirst, we will explore how to use WCA. WCA has the concept of chats. The idea of a chat is that it's something like a memory of the GenAI which gives context to the next prompt. By default, the option \"Use most recent message as context\" is selected which means that the last result will be used as as part of the new prompt:\n\n![](../images/media/mostrecent.png)\n\nSince we are starting a new task of generating a new class, start a new chat using the plus button at the top. The idea is that chats are logical groupings of GenAI activities and they can be used to build upon past results. You can also list all existing chats in case you want to switch contexts. Click on the plus button to start a new chat:\n\n![](../images/media/chats.png)\n\nNow that you have started a new chat, copy and paste a prompt such as the following and click the execute button:\n\n> Create a MicroProfile class that receives requests at the path weather. The class should have a method named forecast which receives HTTP GET requests and produces a JSON response. The forecast method should take a double latitude and a double longitude as input.\n\n![](../images/media/prompt1.png)\n\nAfter some time, WCA will respond with example code and a short explanation. We are already seeing the value of WCA as this basic boilerplate code saves us a lot of time in remembering how to construct REST endpoints, accept parameters, and so on:\n\n<InlineNotification>\n\nIf you receive an error, \"Generated code not shown due to unmet requirements,\" then continue reading below.\n\n</InlineNotification>\n\n![](../images/media/answer1.png)\n\nSwitch to the file explorer, and right click on the `rest` folder and click `New File...` and enter `WeatherService.java`:\n\n![](../images/media/newfile.png)\n\nSelect all of the generated code from WCA (there is a copy-to-clipboard button at the top right of the code output) and paste into `WeatherService.java` in the file editor.\n\nIt is possible you may have received the following error from WCA:\n\n> Generated code not shown due to unmet requirements. Please try again.\n\nThis is a potential error during the WCA preview. Sometimes retrying the same prompt or changing the prompt slightly may help. This is a known issue that is actively being worked on before general availability of WCA. If you receive this error for this initial prompt, then you may use the following code for `WeatherService.java` (click the copy-to-clipboard button in the top right):\n\n```\npackage com.example.weather;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/weather\")\npublic class WeatherService {\n  @GET\n  @Path(\"/forecast/{latitude}/{longitude}\")\n  @Produces(MediaType.APPLICATION_JSON)\n  public String forecast(@PathParam(\"latitude\") double latitude, @PathParam(\"longitude\") double longitude) {\n    // TODO: implement logic to retrieve weather forecast for the given location\n    return \"{}\";\n  }\n}\n```\n\n<InlineNotification>\n\nAs you may have noticed by the `import` statements, parts of MicroProfile such as REST support are implemented by Jakarta Enterprise Edition (`import jakarta...`) or Java Enterprise Edition (`import javax...`), so MicroProfile stands on top of some of the leading Java enterprise standards.\n\n</InlineNotification>\n\nYou can now try different things and interact with WCA. For example, we didn't provide much context about our application, so the generated code is in the `com.example.weather` package; however, our application is in the `com.demo.rest` package.\n\nIn the VS Code editor for `WeatherService.java`, select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\n![](../images/media/selectall.png)\n\nNow execute the following prompt:\n\n> Change the package to com.demo.rest\n\n![](../images/media/changepackage.png)\n\nWCA will generate the same code as before but the package is now correct:\n\n![](../images/media/answer1b.png)\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n### Generate simple web service implementation\n\nIn the VS Code editor for `WeatherService.java`, select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\n![](../images/media/selectall.png)\n\nNow let's generate the implementation of the web service which calls the [Weather.gov API](https://www.weather.gov/documentation/services-web-api) using the latitude and longitude using the following prompt:\n\n> Create a String named url that starts with \"https://api.weather.gov/points/\" and appends the latitude followed by the string \",\" and followed by the longitude. Then create a Jakarta REST ClientBuilder passing the URL to the target method and execute the get method. Read the resulting Response as a String entity and parse it using Json.createReader.\n\nThis results in the following output which is a good starting point for calling the Weather.gov API:\n\n![](../images/media/wsimpl2.png)\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nAdditional code would be needed for a full implementation but WCA has saved us a lot of time in creating the basic scaffolding of what we need.\n\nClicking the Document button on the `forecast` method quickly generates simple documentation which can be copy/pasted into the editor:\n\n![](../images/media/documentforecast.png)\n\nIf you'd like to learn more about MicroProfile RESTful web services in general, we recommend the following Liberty guide and you could even try creating WCA prompts based on the guide: <https://openliberty.io/guides/rest-intro.html>\n\n### Generate MicroProfile Configuration code\n\n[MicroProfile Configuration](https://download.eclipse.org/microprofile/microprofile-config-3.0/microprofile-config-spec-3.0.html) (mpConfig) is a flexible way to configure an application using Java system properties, environment variables, properties files, and custom sources. Let's enhance our `WeatherService.java` to add some MicroProfile configuration elements to make the application more flexible.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add an MicroProfile Configuration field named baseURL with a default String value of \"https://api.weather.gov/points/\" and then use this field in the forecast method.\n\nExample result:\n\n![](../images/media/addconfig2.png)\n\nNotice that WCA was able to modify the class and augment it with the requested prompt. An additional `import` statement was added, the MicroProfile configuration field was added, and the `forecast` method was modified to use the new field.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile Configuration in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-config-intro.html>\n\n### Generate MicroProfile metrics code\n\n[MicroProfile Metrics](https://download.eclipse.org/microprofile/microprofile-metrics-5.0.0/microprofile-metrics-spec-5.0.0.html) (mpMetrics) provides a standardized way to publish metrics to determine health in detail and generate capacity planning data. Let's enhance our `WeatherService.java` to add some MicroProfile metrics elements to make the application easier to monitor.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add MicroProfile Metrics Timed and Counted annotations to the forecast method with a name of forecastTime.\n\nExample result:\n\n![](../images/media/metrics2.png)\n\nNotice that WCA was able to modify the class and augment it with the requested prompt. Additional `import` statements were added, `@Timed` and `@Counted` annotations were added to the method, and it was smart enough to give different names to the different annotations.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile Metrics in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-metrics.html>\n\n### Generate a health check\n\n[MicroProfile Health](https://download.eclipse.org/microprofile/microprofile-health-4.0.1/microprofile-health-spec-4.0.1.html) (mpHealth) provides standardized `/health` HTTP endpoints that determine whether an application is ready to serve user traffic either through basic built-in heuristics (e.g. the application has started) or through custom application code. This endpoint is particularly useful in Kubernetes environments to help its routing infrastructure know when to send traffic to a pod and/or kill a pod; however, it is also useful in non-Kubernetes environments.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Generate a Java class which is an MicroProfile health check which creates a Jakarta REST ClientBuilder passing the URL of \"https://api.weather.gov/\" to the target method and executing the get method. If the String result of the call includes \"OK\" then return UP for the health check. Otherwise, return DOWN.\n\nThe resulting health check can use some clean up but it saves a lot of time and gets things mostly correct. In this example, the `if` check is wrong as it's checking for `\"UP\"` instead of `\"OK\"` as requested in the prompt. This shows the importance of carefully reviewing code generated by GenAI systems and this applies to all such systems.\n\n![](../images/media/healthcheck.png)\n\nIf you'd like to learn more about MicroProfile Health in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-health.html>\n\n### Generate MicroProfile fault tolerance code\n\n[MicroProfile Fault Tolerance](https://download.eclipse.org/microprofile/microprofile-fault-tolerance-4.1/microprofile-fault-tolerance-spec-4.1.html) (mpMetrics) provides a standardized way to help applications fail fast and recover smoothly by guiding how and when certain requests occur and by providing fallback strategies to handle common errors.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add the MicroProfile Fault Tolerance Timeout annotation to the forecast method with a value of 300 milliseconds.\n\nExample result:\n\n![](../images/media/timeout.png)\n\nNotice that WCA was able to modify the class and augment it with the requested prompt. An additional `import` statement was added and an `@Timeout` annotation was added to the method.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n#### Fault tolerance circuit breaker\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\nFor the prompt, enter something like the following:\n\n> Add the MicroProfile Fault circuit breaker with a success threshold of 10, request volume threshold of 4, failure ratio of 0.75, and delay of 1000 to the forecast method.\n\nExample result:\n\n![](../images/media/circuitbreaker.png)\n\nNotice that WCA was able to modify the class and augment it with an additional `import` statement and the `@CircuitBreaker` annotation.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n#### Fault tolerance bulkhead\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a MicroProfile Fault Tolerance bulkhead with a maximum of 5 concurrent requests to the forecast method.\n\nExample result:\n\n![](../images/media/bulkhead.png)\n\nNotice that WCA was able to modify the class and augment it with an additional `import` statement and the `@Bulkhead` annotation.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n#### Fault tolerance retry\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a MicroProfile Fault Tolerance retry on the forecast method based on TimeoutException.class with a maximum retries of 4 and maximum duration of 10 seconds.\n\nExample result:\n\n![](../images/media/retry.png)\n\nNotice that WCA was able to modify the class and augment it with additional `import` statements and the `@Retry` annotation.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile Fault Tolerance in general, we recommend the following Liberty guide: <https://openliberty.io/guides/retry-timeout.html>\n\n### Generate MicroProfile OpenAPI Documentation\n\n[MicroProfile OpenAPI](https://download.eclipse.org/microprofile/microprofile-open-api-3.1.2/microprofile-openapi-spec-3.1.2.html) (mpOpenAPI) helps you to generate structured documentation from your Jakarta RESTful Services or JAX-RS applications. This documentation helps other microservices and developers to understand and communicate with your application.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a MicroProfile @Operation annotation to the forecast method. Also add an @APIResponseSchema annotation to the forecast method for a 200 response code with a value of String.class.\n\nExample result:\n\n![](../images/media/openapi.png)\n\nThis is a particularly impressive example of watsonx GenAI because OpenAPI can require very verbose code since it's documentation and watsonx is able to use its Explain capabilities that we demonstrated earlier to generate detailed OpenAPI usage including on a per-parameter level.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile OpenAPI in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-openapi.html>\n\n### Generate MicroProfile template interfaces\n\nThe [MicroProfile Rest Client](https://download.eclipse.org/microprofile/microprofile-rest-client-4.0/microprofile-rest-client-spec-4.0.html) (mpRestClient) provides a type-safe way to call RESTful web services. The remote web service is defined as a Java `interface` and the REST client handles the implementation of the interface on the client side. We will use WCA to convert our web service into an interface and then generate a Rest Client.\n\nMake sure that `WeatherService.java` code is not selected in the editor. We are starting from scratch and do not need to provide any context. Start a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Create a MicroProfile RESTful template interface at the path /weather which uses RegisterRestClient with a key of weatherClient and a base URI of http://localhost:9080/weather and which is AutoCloseable. The interface should have a method named forecast which receives HTTP GET requests and produces a JSON response. The forecast method should take a double latitude and a double longitude as input.\n\nExample result:\n\n![](../images/media/restclient.png)\n\nNotice that WCA was able to create an interface with the `@RegisterRestClient` annotation and the correct method with annotations. This is very similar to the class we created before but this interface may be used as a client for another MicroService.\n\nNow we can build the client application using this interface. For the prompt, enter something like the following:\n\n> Create a Java class called WeatherServiceClient which injects a RestClient using the WeatherService interface and has a method named call which uses RestClientBuilder to call the forecast method and print out the String result.\n\nExample result:\n\n![](../images/media/restclient2.png)\n\nThe results aren't quite right as it's missing the CDI annotation to inject the client but the scaffolding still saves significant time.\n\nIf you'd like to learn more about MicroProfile Rest Client in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-rest-client.html>\n\n### Generate JSON Web Token support for a microservice\n\n[MicroProfile JWT](https://download.eclipse.org/microprofile/microprofile-jwt-auth-2.1/microprofile-jwt-auth-spec-2.1.html) (mpJwt) provides a standardized way for microservices to use JSON Web Tokens to authenticate users instead of, or in addition to, the configured user registry.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a field named roles with a MicroProfile JWT Claim annotation with a value of groups. Also add a RolesAllowed annotation to the forecast method that uses the role user.\n\nExample result:\n\n![](../images/media/jwt.png)\n\nNotice that WCA was able to modify the class and augment an additional `import`, a `@RolesAllowed` annotation for authorization and a new parameter named `groups` to the `forecast` method.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile JWT in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-jwt.html>\n\n### Real World Usage\n\nNow, let's apply the lessons we've learned to more real world usage with a working application.\n\n1. In VS Code, click on the Extensions, search for `java` and click `Install` on the `Extension Pack for Java`:\n   \n   ![](../images/media/javaextension.png)\n    \n1. Wait until the extension shows `Disable` and `Uninstall` meaning it's installed:\n   \n   ![](../images/media/installed.png)\n    \n1. In VS code, open the Terminal window:\n   \n   ![](../images/media/openterminal.png)\n    \n1. Select the `lab` directory as the working directory:\n   \n   ![](../images/media/selectdir.png)\n    \n1. Download a recent version of Apache Maven:\n   ```\n   wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.zip\n   ```\n1. Unzip Apache Maven:\n   ```\n   unzip apache-maven-3.9.9-bin.zip\n   ```\n1. Add Maven to the PATH:\n   ```\n   export PATH=/home/admin/lab/apache-maven-3.9.9/bin/:$PATH\n   ```\n1. Add Java 11 to the PATH:\n   ```\n   export PATH=/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-3.el8.x86_64/bin/:$PATH\n   ```\n1. Update the JAVA_HOME environment variable:\n   ```\n   export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-3.el8.x86_64/\n   ```\n1. Clone the Liberty [Creating a RESTful web service guide](https://openliberty.io/guides/rest-intro.html) repository:\n   ```\n   git clone https://github.com/openliberty/guide-rest-intro.git\n   ```\n\n   Peform this from the newly opened Terminal window in VS Code:\n   \n   ![](../images/media/terminalclone.png)\n    \n1. Change directory to the new clone and into its `finish` directory:\n   ```\n   cd guide-rest-intro/finish\n   ```\n1. Start Liberty dev mode:\n   ```\n   mvn liberty:dev\n   ```\n1. Wait a few minutes until you see the application is ready to be executed:\n   \n   ![](../images/media/appready.png)\n    \n1. Open the `server.xml` file under `lab/guide-rest-intro/finish/src/main/liberty/config`:\n   \n   ![](../images/media/server.png)\n    \n1. Remove the two `feature` lines and add the following line:\n   ```\n         <feature>microProfile-6.1</feature>\n   ```\n1. Open Firefox and then go to this page:\n   ```\n   http://localhost:9080/openapi/ui/\n   ```\n1. You should see a single REST endpoint in the sample application:\n   \n   ![](../images/media/openapi1.png)\n    \n1. Go back to VS Code and expand `lab/guide-rest-intro/finish/src/main/java/io/openliberty/guides`, right click on `rest`, click `New File...`, and enter `HeapResource.java`\n1. Enter the following comment in the file:\n   ```\n   // a resource with a Jakarta REST GET operation to return the Java heap usage\n   ```\n1. Click on View } Command Palette...\n   \n   ![](../images/media/commandpalette.png)\n    \n1. Type `inline suggestion trigger` and then click on the first result\n   \n   ![](../images/media/trigger.png)\n    \n1. WCA will generate code in a light grey text:\n   \n   ![](../images/media/wcatemp.png)\n    \n1. Click the `Tab` key to accept WCA's suggestion:\n1. WCA's suggestion might not fully compile. For example, the package may be incorrect. Select the `package` line, click the light bulb and choose the option to fix the package:\n   \n   ![](../images/media/package.png)\n    \n1. Type `Ctrl+s` to save the file or click File } Save\n1. Switch to Firefox and refresh the OpenAPI page and you should see the new endpoint which you can expand:\n   \n   ![](../images/media/newendpoint.png)\n    \n1. Click Try it Out, then Execute and then you should see the result:\n   \n   ![](../images/media/memory.png)\n    \n1. Next, let's add a unit test. Go back to VS Code, and above the `getHeap` method, click on `Unit Test`:\n   \n   ![](../images/media/unittest.png)\n    \n1. The generated tests can then be copied into the `lab/guide-rest-intro/finish/src/test/java/it/io/openliberty/guides/rest/EndpointIT.java` and then type `ENTER` in the Liberty dev mode terminal to run the tests.\n\n### Conclusion\n\nThis completes the lab. We hope this demonstrated how to use GenAI to accelerate MicroProfile code generation. As IBM's foundational models improve, everything from implementation, testing, documentation, and more will continue to improve. We encourage you to continue to explore using the preview version of WCA on your own time (free IBMid required to login and access): <https://early-access.ibm.com/software/support/trial/cst/programwebsite.wss?siteId=2044&tabId=5712&p=&h=null>. Work with your IBM Account Team on the best way to access WCA through IBM Cloud.\n\n# Getting help and troubleshooting\n\nThis section provides information about getting help with your lab and some common troubleshooting topics.\n\n## Common troubleshooting tips\n\n### Error: Generated code not shown due to unmet requirements\n\nYou may see the following response from WCA:\n\n> Generated code not shown due to unmet requirements. Please try again.\n\nIn some cases, repeating the same prompt will work and in other cases you may need to modify the prompt a little bit to avoid this error.\n\nWork is underway to improve this error and its prevalence for the generally available release of WCA.\n\n### Error: IBM watsonx Code Assistant doesn't support generated code in this programming language.\n\nThis can be ignored and will be fixed after the preview version.\n\n## Getting help\n\nFor additional details about WCA and help resources, review the private preview link (free IBMid required to login and access): <https://early-access.ibm.com/software/support/trial/cst/programwebsite.wss?siteId=2044&tabId=5712&p=&h=null>\n","type":"Mdx","contentDigest":"c9cb16f0f66c72a9ada267ede65bbce5","owner":"gatsby-plugin-mdx","counter":685},"frontmatter":{"title":"Lab 2201 - From Zero to Hero MicroProfile application creation using AI","description":"Lab 2201 - From Zero to Hero MicroProfile application creation using AI"},"exports":{},"rawBody":"---\ntitle: Lab 2201 - From Zero to Hero MicroProfile application creation using AI\ndescription: Lab 2201 - From Zero to Hero MicroProfile application creation using AI\n---\n\n<PageDescription>\n\nYou might have some concerns with Cloud deployments such as serviceability, configuration, development, testing, and more. Luckily, MicroProfile addresses these concerns. MicroProfile defines cloud native API standards for developing portable microservices which function natively in the Cloud. IBM WebSphere Liberty offers a first-class implementation for MicroProfile. MicroProfile application development is even easier with Generative Artificial Intelligence (GenAI). This hands-on session shows how to use GenAI to help with MicroProfile application creation on Liberty. After this session, you should be able to use MicroProfile in your application with great confidence and significantly improved productivity.\n\n</PageDescription>\n\n# Notices and disclaimers\n\n© 2024 International Business Machines Corporation. No part of this document may be reproduced or transmitted in any form without written permission from IBM.\n\nU.S. Government Users Restricted Rights — use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM.\n\nThis document is current as of the initial date of publication and may be changed by IBM at any time. Not all offerings are available in every country in which IBM operates.\n\nInformation in these presentations (including information relating to products that have not yet been announced by IBM) has been reviewed for accuracy as of the date of initial publication and could include unintentional technical or typographical errors. IBM shall have no responsibility to update this information. \n\nThis document is distributed “as is” without any warranty, either express or implied. In no event, shall IBM be liable for any damage arising from the use of this information, including but not limited to, loss of data, business interruption, loss of profit or loss of opportunity. IBM products and services are warranted per the terms and conditions of the agreements under which they are provided. The performance data and client examples cited are presented for illustrative purposes only. Actual performance results may vary depending on specific configurations and operating conditions.\n\nIBM products are manufactured from new parts or new and used parts. In some cases, a product may not be new and may have been previously installed. Regardless, our warranty terms apply.”\n\nAny statements regarding IBM's future direction, intent or product plans are subject to change or withdrawal without notice.\n\nPerformance data contained herein was generally obtained in a controlled, isolated environments. Customer examples are presented as illustrations of how those customers have used IBM products and the results they may have achieved. Actual performance, cost, savings or other results in other operating environments may vary. \n\nReferences in this document to IBM products, programs, or services does not imply that IBM intends to make such products, programs or services available in all countries in which IBM operates or does business. \n\nWorkshops, sessions and associated materials may have been prepared by independent session speakers, and do not necessarily reflect the views of IBM. All materials and discussions are provided for informational purposes only, and are neither intended to, nor shall constitute legal or other guidance or advice to any individual participant or their specific situation.\n\nIt is the customer’s responsibility to ensure its own compliance with legal requirements and to obtain advice of competent legal counsel as to the identification and interpretation of any relevant laws and regulatory requirements that may affect the customer’s business and any actions the customer may need to take to comply with such laws. IBM does not provide legal advice or represent or warrant that its services or products will ensure that the customer follows any law.\n\nQuestions on the capabilities of non-IBM products should be addressed to the suppliers of those products. IBM does not warrant the quality of any third-party products, or the ability of any such third-party products to interoperate with IBM’s products. IBM expressly disclaims all warranties, expressed or implied, including but not limited to, the implied warranties of merchantability and fitness for a purpose.\n\nThe provision of the information contained herein is not intended to, and does not, grant any right or license under any IBM patents, copyrights, trademarks or other intellectual property right.\n\nIBM, the IBM logo, and ibm.com are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the Web at “Copyright and trademark information” at\n<https://www.ibm.com/legal/copyright-trademark>.\n\n# Background\n\n## IBM WebSphere Liberty\n\n[IBM WebSphere Liberty](https://www.ibm.com/websphere/liberty) is a next-generation Java application runtime that accelerates the delivery of cloud-native applications. WebSphere Liberty is largely based on the open-source [Open Liberty](https://github.com/OpenLiberty/open-liberty) project so some links and examples may point to Open Liberty documentation.\n\n## Microservices\n\nOne of the transformative architectures that the cloud has accelerated is a [microservices architecture](https://www.ibm.com/topics/microservices). The idea is that once it's easier to build virtualized and isolated components, this allows breaking up traditional \"monolith\" applications into smaller and more nimble applications that talk to each other for faster development iteration and independent scaling capabilities. New Java application development standards have been developed to support the microservices architectural style and one such open source standard supported by IBM is [MicroProfile](https://microprofile.io/). Liberty is one application server that implements the MicroProfile standard.\n\n## IBM watsonx Code Assistant\n\nIBM watsonx Code Assistant is a Large Language Model (LLM)-based generative AI based on IBM's Granite foundation models. WCA is tuned specifically for Enterprise Java code in addition to other programming languages. WCA is the main tool we will be using in this lab and it has capabilities to [generate code, explain code, generate tests, and more](https://www.ibm.com/blog/announcement/watsonx-code-assistant-java/).\n\n![](../images/media/keycaps.png)\n\n### WCA Preview\n\nAt the time of this writing, a preview version of WCA is available for download for Visual Studio Code and Eclipse using the following link. The VS Code extension is already downloaded and installed in the lab image so this is only for reference if you'd like to explore more or try this out after the lab: <https://early-access.ibm.com/software/support/trial/cst/programwebsite.wss?siteId=2044&tabId=5712&p=&h=null>\n\nThe AI model used is the IBM Granite 20B enterprise Java code instruct model. This model was trained in two phases. In the first phase, the model was trained on 3 to 4 trillion tokens sourced from 116 programming languages, ensuring a comprehensive understanding of programming languages and syntax. In the second phase, the model was additionally trained on 500 billion tokens with a carefully designed mixture of high-quality data from code and natural language domains to improve the model's ability to reason. For more information about the IBM Granite 20B enterprise Java code instruct model, see [Granite Code Models: A Family of Open Foundation Models for Code Intelligence](https://arxiv.org/pdf/2405.04324).\n\nTraining of the IBM Granite 20B enterprise Java code instruct model included datasets for Jakarta EE, MicroProfile, and other enterprise Java repositories such as Open Liberty GitHub repositories.\n\nThe context window for the IBM Granite 20B enterprise Java code instruct model is 8192 tokens.\n\nThe model uses prompts for inference only and does not store any client prompts. None of your data is used to train the model in realtime or stored and used offline.\n\n#### IBM Cloud Transformation Advisor\n\nYou may be familiar with the [IBM Cloud Transformation Advisor](https://www.ibm.com/products/cloud-pak-for-applications/transformation-advisor) tool which helps evaluate the transformation and modernization of code from older versions of Java and traditional programming models such as WebSphere Application Server traditional to platforms such as Liberty.\n\nWCA includes the capabilities of Transformation Advisor and uses automation and generative AI to enact its recommendations.\n\n#### Limitations\n\nAt the time of this writing, WCA has some limitations:\n\n1. Only the Eclipse IDE is available to modernize your applications.\n1. Only single module Maven WAR applications are supported. Although multi-module projects are not supported, you can point to a WAR module in a multi-module project.\n1. Only Maven can be used to build applications.\n1. The following use cases are supported only on macOS and Windows:\n    1. Generating tests for your Java application with the Visual Studio Code extension\n    1. Generating JUnit tests for your Java application with the Eclipse IDE\n    1. Explaining code changes\n    1. Explaining methods\n\nFor the above and other reasons, this lab does not explore all of the features of WCA; however, if you have the opportunity, we recommend that you check out Lab 1596: Hands-on workshop on AI in Java application development. Lab 1596 explores all of the features of WC4EJA.\n\n#### Feedback\n\nYou can provide feedback on your experiences to the lab proctor, including suggestions for when your results don't match your expectations.\n\n# Running the Lab\n\n## Lab\n\nThis lab will go through the process of running IBM watsonx Code Assistant (WCA) with a focus on MicroProfile applications. Additional \"learn more\" boxes may be peppered throughput the lab:\n\n<InlineNotification>\n\nThese \"learn more\" boxes will be peppered throughout the lab steps to explain steps in more detail. We encourage you to read these or at least skim them to get a detailed understanding how everything works.\n\n</InlineNotification>\n\nLet's get started!\n\n### Access the Virtual Machine\n\n1.  The first screen you'll see is the lab page. Click on the `Console` button to access the lab machine:\n    \n    ![](../images/media/accesslab.png)\n\n1.  Click on the `Open in a new window` button to the left of the close button to open a larger screen:\n    \n    ![](../images/media/openinnewwindow.png)\n\n1.  The screen is initially locked. Use your mouse to drag from the bottom to the top:\n    \n    ![](../images/media/unlockscreen.png)\n\n1.  Click on the **admin** user:\n    \n    ![](../images/media/image7.png)\n\n1.  Enter the password **IBMDem0s** (with a **zero** rather than an O) to login:\n    \n    ![](../images/media/image8.png)\n\n### Copy and Pasting\n\nYou may copy and paste from this lab guide into the client virtual machine:\n\n1.  Ensure the target of the paste has focus in the virtual machine (e.g. a terminal window).\n\n2.  Click the Cursor icon at the top of the client virtual machine browser tab:\n    \n    ![](../images/media/image10.png)\n\n3.  Paste something into the textbox and then click `Slow Send Text`. After the text has completed sending, click the close button in the top right of the send text popup.\n    \n    ![](../images/media/copypaste.png)\n\n4.  You can try `Fast Send Text` but be careful to double check if all characters were sent successfully.\n\n### Open Visual Studio Code\n\nWe will use a pre-installed IBM watsonx Code Assistant (WCA) extension in Visual Studio Code which is a common code editor.\n\n1.  Click on Activities in the top left:\n    \n    ![](../images/media/image12.png)\n\n2.  Click on the Visual Studio Code (vscode) icon to launch it:\n    \n    ![](../images/media/image13.png)\n\n### Explain a Java class\n\nFirst, let's get our feet wet by asking WCA to explain a Java class file. The lab image contains an MicroProfile starter project which we will open and explore:\n\n1. Click on the file explorer in the top left of VS Code and then expand the `app-name` project and open `src/main/java/com/demo/rest/RestApplication.java`:\n    \n   ![](../images/media/openrestapp.png)\n\n1. WCA adds Explain, Document, and Unit Test buttons above Java classes and methods:\n    \n   ![](../images/media/vscodeannotations.png)\n\n1. Click the Explain button above the `RestApplication` class. The WCA extension window will open on the left side and send a request to the WCA service to explain the selected code:\n    \n   ![](../images/media/explainrestapp.png)\n\n1. Next, click on the Document button above the `RestApplication` class. The WCA extension window will open on the left side and send a request to the WCA service to generation code documentation for the selected class. If you are happy with the generated documentation code, you would then copy and paste the code into the file editor on the right.\n    \n   ![](../images/media/document.png)\n\n### MicroProfile and GenAI\n\nNow let's get to the heart of the lab and use GenAI to generate MicroProfile code. Let's start with a simple MicroProfile REST endpoint which will generate a weather forecast for a latitude/longitude point. REST is an architectural style for web service calls and it's implemented in MicroProfile using [Jakarta Enterprise Edition RESTful Web Service](https://en.wikipedia.org/wiki/Jakarta_RESTful_Web_Services).\n\nFirst, we will explore how to use WCA. WCA has the concept of chats. The idea of a chat is that it's something like a memory of the GenAI which gives context to the next prompt. By default, the option \"Use most recent message as context\" is selected which means that the last result will be used as as part of the new prompt:\n\n![](../images/media/mostrecent.png)\n\nSince we are starting a new task of generating a new class, start a new chat using the plus button at the top. The idea is that chats are logical groupings of GenAI activities and they can be used to build upon past results. You can also list all existing chats in case you want to switch contexts. Click on the plus button to start a new chat:\n\n![](../images/media/chats.png)\n\nNow that you have started a new chat, copy and paste a prompt such as the following and click the execute button:\n\n> Create a MicroProfile class that receives requests at the path weather. The class should have a method named forecast which receives HTTP GET requests and produces a JSON response. The forecast method should take a double latitude and a double longitude as input.\n\n![](../images/media/prompt1.png)\n\nAfter some time, WCA will respond with example code and a short explanation. We are already seeing the value of WCA as this basic boilerplate code saves us a lot of time in remembering how to construct REST endpoints, accept parameters, and so on:\n\n<InlineNotification>\n\nIf you receive an error, \"Generated code not shown due to unmet requirements,\" then continue reading below.\n\n</InlineNotification>\n\n![](../images/media/answer1.png)\n\nSwitch to the file explorer, and right click on the `rest` folder and click `New File...` and enter `WeatherService.java`:\n\n![](../images/media/newfile.png)\n\nSelect all of the generated code from WCA (there is a copy-to-clipboard button at the top right of the code output) and paste into `WeatherService.java` in the file editor.\n\nIt is possible you may have received the following error from WCA:\n\n> Generated code not shown due to unmet requirements. Please try again.\n\nThis is a potential error during the WCA preview. Sometimes retrying the same prompt or changing the prompt slightly may help. This is a known issue that is actively being worked on before general availability of WCA. If you receive this error for this initial prompt, then you may use the following code for `WeatherService.java` (click the copy-to-clipboard button in the top right):\n\n```\npackage com.example.weather;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/weather\")\npublic class WeatherService {\n  @GET\n  @Path(\"/forecast/{latitude}/{longitude}\")\n  @Produces(MediaType.APPLICATION_JSON)\n  public String forecast(@PathParam(\"latitude\") double latitude, @PathParam(\"longitude\") double longitude) {\n    // TODO: implement logic to retrieve weather forecast for the given location\n    return \"{}\";\n  }\n}\n```\n\n<InlineNotification>\n\nAs you may have noticed by the `import` statements, parts of MicroProfile such as REST support are implemented by Jakarta Enterprise Edition (`import jakarta...`) or Java Enterprise Edition (`import javax...`), so MicroProfile stands on top of some of the leading Java enterprise standards.\n\n</InlineNotification>\n\nYou can now try different things and interact with WCA. For example, we didn't provide much context about our application, so the generated code is in the `com.example.weather` package; however, our application is in the `com.demo.rest` package.\n\nIn the VS Code editor for `WeatherService.java`, select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\n![](../images/media/selectall.png)\n\nNow execute the following prompt:\n\n> Change the package to com.demo.rest\n\n![](../images/media/changepackage.png)\n\nWCA will generate the same code as before but the package is now correct:\n\n![](../images/media/answer1b.png)\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n### Generate simple web service implementation\n\nIn the VS Code editor for `WeatherService.java`, select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\n![](../images/media/selectall.png)\n\nNow let's generate the implementation of the web service which calls the [Weather.gov API](https://www.weather.gov/documentation/services-web-api) using the latitude and longitude using the following prompt:\n\n> Create a String named url that starts with \"https://api.weather.gov/points/\" and appends the latitude followed by the string \",\" and followed by the longitude. Then create a Jakarta REST ClientBuilder passing the URL to the target method and execute the get method. Read the resulting Response as a String entity and parse it using Json.createReader.\n\nThis results in the following output which is a good starting point for calling the Weather.gov API:\n\n![](../images/media/wsimpl2.png)\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nAdditional code would be needed for a full implementation but WCA has saved us a lot of time in creating the basic scaffolding of what we need.\n\nClicking the Document button on the `forecast` method quickly generates simple documentation which can be copy/pasted into the editor:\n\n![](../images/media/documentforecast.png)\n\nIf you'd like to learn more about MicroProfile RESTful web services in general, we recommend the following Liberty guide and you could even try creating WCA prompts based on the guide: <https://openliberty.io/guides/rest-intro.html>\n\n### Generate MicroProfile Configuration code\n\n[MicroProfile Configuration](https://download.eclipse.org/microprofile/microprofile-config-3.0/microprofile-config-spec-3.0.html) (mpConfig) is a flexible way to configure an application using Java system properties, environment variables, properties files, and custom sources. Let's enhance our `WeatherService.java` to add some MicroProfile configuration elements to make the application more flexible.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add an MicroProfile Configuration field named baseURL with a default String value of \"https://api.weather.gov/points/\" and then use this field in the forecast method.\n\nExample result:\n\n![](../images/media/addconfig2.png)\n\nNotice that WCA was able to modify the class and augment it with the requested prompt. An additional `import` statement was added, the MicroProfile configuration field was added, and the `forecast` method was modified to use the new field.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile Configuration in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-config-intro.html>\n\n### Generate MicroProfile metrics code\n\n[MicroProfile Metrics](https://download.eclipse.org/microprofile/microprofile-metrics-5.0.0/microprofile-metrics-spec-5.0.0.html) (mpMetrics) provides a standardized way to publish metrics to determine health in detail and generate capacity planning data. Let's enhance our `WeatherService.java` to add some MicroProfile metrics elements to make the application easier to monitor.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add MicroProfile Metrics Timed and Counted annotations to the forecast method with a name of forecastTime.\n\nExample result:\n\n![](../images/media/metrics2.png)\n\nNotice that WCA was able to modify the class and augment it with the requested prompt. Additional `import` statements were added, `@Timed` and `@Counted` annotations were added to the method, and it was smart enough to give different names to the different annotations.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile Metrics in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-metrics.html>\n\n### Generate a health check\n\n[MicroProfile Health](https://download.eclipse.org/microprofile/microprofile-health-4.0.1/microprofile-health-spec-4.0.1.html) (mpHealth) provides standardized `/health` HTTP endpoints that determine whether an application is ready to serve user traffic either through basic built-in heuristics (e.g. the application has started) or through custom application code. This endpoint is particularly useful in Kubernetes environments to help its routing infrastructure know when to send traffic to a pod and/or kill a pod; however, it is also useful in non-Kubernetes environments.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Generate a Java class which is an MicroProfile health check which creates a Jakarta REST ClientBuilder passing the URL of \"https://api.weather.gov/\" to the target method and executing the get method. If the String result of the call includes \"OK\" then return UP for the health check. Otherwise, return DOWN.\n\nThe resulting health check can use some clean up but it saves a lot of time and gets things mostly correct. In this example, the `if` check is wrong as it's checking for `\"UP\"` instead of `\"OK\"` as requested in the prompt. This shows the importance of carefully reviewing code generated by GenAI systems and this applies to all such systems.\n\n![](../images/media/healthcheck.png)\n\nIf you'd like to learn more about MicroProfile Health in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-health.html>\n\n### Generate MicroProfile fault tolerance code\n\n[MicroProfile Fault Tolerance](https://download.eclipse.org/microprofile/microprofile-fault-tolerance-4.1/microprofile-fault-tolerance-spec-4.1.html) (mpMetrics) provides a standardized way to help applications fail fast and recover smoothly by guiding how and when certain requests occur and by providing fallback strategies to handle common errors.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add the MicroProfile Fault Tolerance Timeout annotation to the forecast method with a value of 300 milliseconds.\n\nExample result:\n\n![](../images/media/timeout.png)\n\nNotice that WCA was able to modify the class and augment it with the requested prompt. An additional `import` statement was added and an `@Timeout` annotation was added to the method.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n#### Fault tolerance circuit breaker\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\nFor the prompt, enter something like the following:\n\n> Add the MicroProfile Fault circuit breaker with a success threshold of 10, request volume threshold of 4, failure ratio of 0.75, and delay of 1000 to the forecast method.\n\nExample result:\n\n![](../images/media/circuitbreaker.png)\n\nNotice that WCA was able to modify the class and augment it with an additional `import` statement and the `@CircuitBreaker` annotation.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n#### Fault tolerance bulkhead\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a MicroProfile Fault Tolerance bulkhead with a maximum of 5 concurrent requests to the forecast method.\n\nExample result:\n\n![](../images/media/bulkhead.png)\n\nNotice that WCA was able to modify the class and augment it with an additional `import` statement and the `@Bulkhead` annotation.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\n#### Fault tolerance retry\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a MicroProfile Fault Tolerance retry on the forecast method based on TimeoutException.class with a maximum retries of 4 and maximum duration of 10 seconds.\n\nExample result:\n\n![](../images/media/retry.png)\n\nNotice that WCA was able to modify the class and augment it with additional `import` statements and the `@Retry` annotation.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile Fault Tolerance in general, we recommend the following Liberty guide: <https://openliberty.io/guides/retry-timeout.html>\n\n### Generate MicroProfile OpenAPI Documentation\n\n[MicroProfile OpenAPI](https://download.eclipse.org/microprofile/microprofile-open-api-3.1.2/microprofile-openapi-spec-3.1.2.html) (mpOpenAPI) helps you to generate structured documentation from your Jakarta RESTful Services or JAX-RS applications. This documentation helps other microservices and developers to understand and communicate with your application.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a MicroProfile @Operation annotation to the forecast method. Also add an @APIResponseSchema annotation to the forecast method for a 200 response code with a value of String.class.\n\nExample result:\n\n![](../images/media/openapi.png)\n\nThis is a particularly impressive example of watsonx GenAI because OpenAPI can require very verbose code since it's documentation and watsonx is able to use its Explain capabilities that we demonstrated earlier to generate detailed OpenAPI usage including on a per-parameter level.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile OpenAPI in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-openapi.html>\n\n### Generate MicroProfile template interfaces\n\nThe [MicroProfile Rest Client](https://download.eclipse.org/microprofile/microprofile-rest-client-4.0/microprofile-rest-client-spec-4.0.html) (mpRestClient) provides a type-safe way to call RESTful web services. The remote web service is defined as a Java `interface` and the REST client handles the implementation of the interface on the client side. We will use WCA to convert our web service into an interface and then generate a Rest Client.\n\nMake sure that `WeatherService.java` code is not selected in the editor. We are starting from scratch and do not need to provide any context. Start a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Create a MicroProfile RESTful template interface at the path /weather which uses RegisterRestClient with a key of weatherClient and a base URI of http://localhost:9080/weather and which is AutoCloseable. The interface should have a method named forecast which receives HTTP GET requests and produces a JSON response. The forecast method should take a double latitude and a double longitude as input.\n\nExample result:\n\n![](../images/media/restclient.png)\n\nNotice that WCA was able to create an interface with the `@RegisterRestClient` annotation and the correct method with annotations. This is very similar to the class we created before but this interface may be used as a client for another MicroService.\n\nNow we can build the client application using this interface. For the prompt, enter something like the following:\n\n> Create a Java class called WeatherServiceClient which injects a RestClient using the WeatherService interface and has a method named call which uses RestClientBuilder to call the forecast method and print out the String result.\n\nExample result:\n\n![](../images/media/restclient2.png)\n\nThe results aren't quite right as it's missing the CDI annotation to inject the client but the scaffolding still saves significant time.\n\nIf you'd like to learn more about MicroProfile Rest Client in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-rest-client.html>\n\n### Generate JSON Web Token support for a microservice\n\n[MicroProfile JWT](https://download.eclipse.org/microprofile/microprofile-jwt-auth-2.1/microprofile-jwt-auth-spec-2.1.html) (mpJwt) provides a standardized way for microservices to use JSON Web Tokens to authenticate users instead of, or in addition to, the configured user registry.\n\nOpen `WeatherService.java` in the VS Code editor and select all of the code using your mouse or Ctrl^A. Whatever is selected will be used as context to the WCA prompt.\n\nStart a new chat in WCA using the plus button at the top. For the prompt, enter something like the following:\n\n> Add a field named roles with a MicroProfile JWT Claim annotation with a value of groups. Also add a RolesAllowed annotation to the forecast method that uses the role user.\n\nExample result:\n\n![](../images/media/jwt.png)\n\nNotice that WCA was able to modify the class and augment an additional `import`, a `@RolesAllowed` annotation for authorization and a new parameter named `groups` to the `forecast` method.\n\nSelect all of the generated code (there is a copy-to-clipboard button at the top right of the code output) and replace `WeatherService.java` in the file editor.\n\nIf you'd like to learn more about MicroProfile JWT in general, we recommend the following Liberty guide: <https://openliberty.io/guides/microprofile-jwt.html>\n\n### Real World Usage\n\nNow, let's apply the lessons we've learned to more real world usage with a working application.\n\n1. In VS Code, click on the Extensions, search for `java` and click `Install` on the `Extension Pack for Java`:\n   \n   ![](../images/media/javaextension.png)\n    \n1. Wait until the extension shows `Disable` and `Uninstall` meaning it's installed:\n   \n   ![](../images/media/installed.png)\n    \n1. In VS code, open the Terminal window:\n   \n   ![](../images/media/openterminal.png)\n    \n1. Select the `lab` directory as the working directory:\n   \n   ![](../images/media/selectdir.png)\n    \n1. Download a recent version of Apache Maven:\n   ```\n   wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.zip\n   ```\n1. Unzip Apache Maven:\n   ```\n   unzip apache-maven-3.9.9-bin.zip\n   ```\n1. Add Maven to the PATH:\n   ```\n   export PATH=/home/admin/lab/apache-maven-3.9.9/bin/:$PATH\n   ```\n1. Add Java 11 to the PATH:\n   ```\n   export PATH=/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-3.el8.x86_64/bin/:$PATH\n   ```\n1. Update the JAVA_HOME environment variable:\n   ```\n   export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-3.el8.x86_64/\n   ```\n1. Clone the Liberty [Creating a RESTful web service guide](https://openliberty.io/guides/rest-intro.html) repository:\n   ```\n   git clone https://github.com/openliberty/guide-rest-intro.git\n   ```\n\n   Peform this from the newly opened Terminal window in VS Code:\n   \n   ![](../images/media/terminalclone.png)\n    \n1. Change directory to the new clone and into its `finish` directory:\n   ```\n   cd guide-rest-intro/finish\n   ```\n1. Start Liberty dev mode:\n   ```\n   mvn liberty:dev\n   ```\n1. Wait a few minutes until you see the application is ready to be executed:\n   \n   ![](../images/media/appready.png)\n    \n1. Open the `server.xml` file under `lab/guide-rest-intro/finish/src/main/liberty/config`:\n   \n   ![](../images/media/server.png)\n    \n1. Remove the two `feature` lines and add the following line:\n   ```\n         <feature>microProfile-6.1</feature>\n   ```\n1. Open Firefox and then go to this page:\n   ```\n   http://localhost:9080/openapi/ui/\n   ```\n1. You should see a single REST endpoint in the sample application:\n   \n   ![](../images/media/openapi1.png)\n    \n1. Go back to VS Code and expand `lab/guide-rest-intro/finish/src/main/java/io/openliberty/guides`, right click on `rest`, click `New File...`, and enter `HeapResource.java`\n1. Enter the following comment in the file:\n   ```\n   // a resource with a Jakarta REST GET operation to return the Java heap usage\n   ```\n1. Click on View } Command Palette...\n   \n   ![](../images/media/commandpalette.png)\n    \n1. Type `inline suggestion trigger` and then click on the first result\n   \n   ![](../images/media/trigger.png)\n    \n1. WCA will generate code in a light grey text:\n   \n   ![](../images/media/wcatemp.png)\n    \n1. Click the `Tab` key to accept WCA's suggestion:\n1. WCA's suggestion might not fully compile. For example, the package may be incorrect. Select the `package` line, click the light bulb and choose the option to fix the package:\n   \n   ![](../images/media/package.png)\n    \n1. Type `Ctrl+s` to save the file or click File } Save\n1. Switch to Firefox and refresh the OpenAPI page and you should see the new endpoint which you can expand:\n   \n   ![](../images/media/newendpoint.png)\n    \n1. Click Try it Out, then Execute and then you should see the result:\n   \n   ![](../images/media/memory.png)\n    \n1. Next, let's add a unit test. Go back to VS Code, and above the `getHeap` method, click on `Unit Test`:\n   \n   ![](../images/media/unittest.png)\n    \n1. The generated tests can then be copied into the `lab/guide-rest-intro/finish/src/test/java/it/io/openliberty/guides/rest/EndpointIT.java` and then type `ENTER` in the Liberty dev mode terminal to run the tests.\n\n### Conclusion\n\nThis completes the lab. We hope this demonstrated how to use GenAI to accelerate MicroProfile code generation. As IBM's foundational models improve, everything from implementation, testing, documentation, and more will continue to improve. We encourage you to continue to explore using the preview version of WCA on your own time (free IBMid required to login and access): <https://early-access.ibm.com/software/support/trial/cst/programwebsite.wss?siteId=2044&tabId=5712&p=&h=null>. Work with your IBM Account Team on the best way to access WCA through IBM Cloud.\n\n# Getting help and troubleshooting\n\nThis section provides information about getting help with your lab and some common troubleshooting topics.\n\n## Common troubleshooting tips\n\n### Error: Generated code not shown due to unmet requirements\n\nYou may see the following response from WCA:\n\n> Generated code not shown due to unmet requirements. Please try again.\n\nIn some cases, repeating the same prompt will work and in other cases you may need to modify the prompt a little bit to avoid this error.\n\nWork is underway to improve this error and its prevalence for the generally available release of WCA.\n\n### Error: IBM watsonx Code Assistant doesn't support generated code in this programming language.\n\nThis can be ignored and will be fixed after the preview version.\n\n## Getting help\n\nFor additional details about WCA and help resources, review the private preview link (free IBMid required to login and access): <https://early-access.ibm.com/software/support/trial/cst/programwebsite.wss?siteId=2044&tabId=5712&p=&h=null>\n","fileAbsolutePath":"/Users/kevin/git/techxchange2024-lab2201/src/pages/index.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}